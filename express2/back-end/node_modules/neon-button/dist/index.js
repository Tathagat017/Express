'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = "body{\n  background-color: rgb(97, 97, 97);\n}\n.styles_outerN__IxLsd{\n  padding: 10px 15px;\n  border: none;\n  outline: none;\n  background-color: black;\n  margin: 20px;\n  border-radius: 5px;\n  transition: 0.5s;\n}\n\n.styles_innerN__2mhRO{\n  font-size: 1.3rem;\n  color: #e3e3e3;\n  transition: 0.5s;\n}\n\n.styles_outerN__IxLsd:hover {\n  box-shadow: 0px 0px 22px 10px #34ebb7;\n  cursor: pointer;\n}\n\n.styles_innerN__2mhRO:hover{\n  color: #34ebb7;\n  text-shadow: 0 0 15px #34ebb7;\n}\n";
var styles = { "outerN": "styles_outerN__IxLsd", "innerN": "styles_innerN__2mhRO" };
styleInject(css);

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var NeonButton = function (_Component) {
  inherits(NeonButton, _Component);

  function NeonButton() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, NeonButton);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = NeonButton.__proto__ || Object.getPrototypeOf(NeonButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = { hover: false }, _this.getInitialState = function () {
      return { hover: false };
    }, _this.toggleHover = function () {
      _this.setState({ hover: !_this.state.hover });
    }, _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(NeonButton, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          text = _props.text,
          color = _props.color;


      var linkStyle;
      if (this.state.hover) {
        linkStyle = { color: color };
      } else {
        linkStyle = { color: '#e3e3e3' };
      }

      var boxStyle;
      if (this.state.hover) {
        boxStyle = { boxShadow: '0px 0px 22px 10px ' + color };
      } else {
        boxStyle = { color: '#e3e3e3' };
      }

      return React__default.createElement(
        'button',
        {
          className: styles.outerN,
          style: boxStyle,
          onMouseEnter: this.toggleHover,
          onMouseLeave: this.toggleHover
        },
        React__default.createElement(
          'div',
          {
            className: styles.innerN,
            style: linkStyle
          },
          text
        )
      );
    }
  }]);
  return NeonButton;
}(React.Component);

NeonButton.propTypes = {
  text: PropTypes.string,
  color: PropTypes.string
};


NeonButton.defaultProps = {
  text: "Enter Button Text",
  color: "#34ebb7"
};

module.exports = NeonButton;
//# sourceMappingURL=index.js.map
